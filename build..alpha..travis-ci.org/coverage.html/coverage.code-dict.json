{"/home/travis/build/npmtest/node-npmtest-electricity/test.js":"/* istanbul instrument in package npmtest_electricity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electricity/lib.npmtest_electricity.js":"/* istanbul instrument in package npmtest_electricity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electricity = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electricity = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electricity/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electricity && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electricity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electricity\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electricity.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_electricity.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electricity.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_electricity.__dirname +\n                    '/lib.npmtest_electricity.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electricity/node_modules/electricity/lib/index.js":"const crypto = require('crypto');\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('util');\nconst zlib = require('zlib');\n\nconst mime = require('mime');\nconst Negotiator = require('negotiator');\nconst react = require('react-tools');\nconst sass = require('node-sass');\nconst sassGraph = require('sass-graph');\nconst Snockets = require('snockets');\nconst Uglify = require('uglify-js');\nconst UglifyCss = require('uglifycss');\nconst watch = require('watch');\n\nconst availableEncodings = ['gzip', 'identity'];\nconst gzipContentTypes = require('./gzipContentTypes.js');\n\nexports.static = function static(directory, options) {\n    directory = path.resolve(directory || 'public');\n\n    if (!options) {\n        options = {};\n    }\n\n    if (!('hashify' in options)) {\n        options.hashify = true;\n    }\n\n    if (!options.sass) {\n        options.sass = {};\n    }\n\n    if (!options.snockets) {\n        options.snockets = {};\n    }\n\n    if (!options.jsx) {\n        options.jsx = {};\n    }\n\n    options.snockets.async = false;\n\n    if (!options.uglifycss) {\n        options.uglifycss = {\n            enabled: true\n        };\n    }\n\n    if (!options.uglifyjs) {\n        options.uglifyjs = {\n            compress: {\n                sequences: false\n            },\n            enabled: true\n        };\n    }\n\n    if (!options.watch) {\n        options.watch = {\n            enabled: true\n        };\n    }\n\n    if (options.hostname) {\n        if (typeof options.hostname !== 'string') {\n            throw Error('hostname must be a string');\n        } else if (options.hostname.slice(-1) === '/') {\n            options.hostname = options.hostname.slice(0, options.hostname.length - 1);\n        }\n    }\n\n    if (options.sass.imagePath) {\n        if (typeof options.sass.imagePath !== 'string') {\n            throw Error('sass.imagePath must be a string');\n        }\n    }\n\n    if (!options.sass.functions) {\n        options.sass.functions = {};\n    }\n\n    options.sass.functions['image-url($img)'] = function(img) {\n        return new sass.types.String('url(\"' +\n            (options.sass.imagePath ?\n                path.join('/', options.sass.imagePath, img.getValue()) :\n                path.join('/', img.getValue())\n            ) +\n            '\")');\n    };\n\n    var files = {};\n    var snockets = new Snockets();\n    var stylesheets = [];\n\n    function cacheFile(filePath, stat) {\n        // Make sure stat wasn't an extra index parameter\n        stat = typeof stat === 'object' ? stat : fs.statSync(filePath);\n\n        if (!stat.isDirectory()) {\n            var data;\n            var ext = path.extname(filePath);\n            var relativeUrl = toRelativeUrl(filePath);\n\n            // Compilation steps\n            if (ext === '.scss' && !shouldIgnore(relativeUrl, options.sass.ignore)) {\n                // Sass\n                options.sass.file = filePath;\n                data = sass.renderSync(options.sass).css.toString();\n\n                // Future steps should treat this as plain CSS\n                relativeUrl = relativeUrl.replace(/.scss$/, '.css');\n                ext = '.css';\n            } else if (ext === '.js' && !shouldIgnore(relativeUrl, options.snockets.ignore)) {\n                // Snockets\n                try {\n                    data = snockets.getConcatenation(filePath, options.snockets);\n                } catch (e) {\n                    // Snockets can't parse, so just pass the js file along\n                    console.warn('Snockets skipping ' + filePath + \":\\n\" + e);\n                    data = fs.readFileSync(filePath).toString();\n                }\n            }\n\n            if (ext === '.js' && !shouldIgnore(relativeUrl, options.jsx.ignore)) {\n                // React\n                data = data || fs.readFileSync(filePath).toString();\n\n                try {\n                    data = react.transform(data, options.jsx);\n                } catch (e) {\n                    // React can't transform, so just pass the js file along\n                    console.warn(`JSX compiler skipping ${filePath}:\\n${e}`);\n                    data = fs.readFileSync(filePath).toString();\n                }\n            }\n\n            // Postprocessing steps\n            if (ext === '.css') {\n                if (options.uglifycss.enabled) {\n                    // Uglifycss\n                    data = data ?\n                        UglifyCss.processString(data, options.uglifycss) :\n                        UglifyCss.processFiles([filePath], options.uglifycss);\n                }\n            } else if (ext === '.js' && options.uglifyjs.enabled && !shouldIgnore(relativeUrl, options.uglifyjs.ignore)) {\n                // Uglifyjs\n                options.uglifyjs.fromString = !!data;\n\n                try {\n                    data = options.uglifyjs.fromString ?\n                        Uglify.minify(data.toString(), options.uglifyjs).code :\n                        Uglify.minify(filePath, options.uglifyjs).code;\n                } catch (e) {\n                    console.warn(util.format('UglifyJS skipping %s:\\n %s (line %s, col %s, pos %s)', filePath, e.message, e.line, e.col, e.pos));\n                }\n            }\n\n            // Have data?\n            data = data || fs.readFileSync(filePath);\n\n            // Cache file and hash, generate hash later if it's CSS because we're going to modify the contents\n            files[relativeUrl] = {\n                content: data,\n                contentLength: typeof data === 'string' ? Buffer.byteLength(data) : data.length,\n                contentType: mime.lookup(relativeUrl),\n                hash: ext !== '.css' ? crypto.createHash('md5').update(data).digest('hex') : '',\n                modified: stat.mtime\n            };\n\n            if (ext === '.css') {\n                stylesheets.push(relativeUrl);\n            }\n\n            return relativeUrl;\n        }\n    }\n\n    function dehashifyPath(filePath) {\n        if (!options.hashify) {\n            return {\n                path: filePath,\n                hash: undefined\n            }\n        }\n        var hashRegex = /-[0-9a-f]+(\\.[^\\.]*$)/;\n        var hashMatch = filePath.match(hashRegex);\n        var hash = hashMatch ? hashMatch[0].slice(1).replace(/\\.([^\\.]*$)/, '') : '';\n\n        return {\n            path: hash.length == 32 ? filePath.replace(hashRegex, '$1') : filePath,\n            hash: hash.length == 32 ? hash : null\n        };\n    }\n\n    function gzip(file, callback) {\n        if (file.gzippedContent && file.gzippedContentLength) {\n            return callback(null, file);\n        }\n\n        zlib.gzip(file.content, function gzipFile(err, gzippedContent) {\n            if (err) {\n                return callback(err);\n            }\n\n            file.gzippedContent = gzippedContent;\n            file.gzippedContentLength = gzippedContent.length;\n\n            callback(null, file);\n        });\n    }\n\n    function hashifyCss(cssPath) {\n        return files[cssPath].content.toString().replace(/url\\(['\"]?(.*?)['\"]?\\)/g, function(match, filename) {\n            var file;\n\n            if (filename[0] === '/') {\n                file = files[filename];\n            } else {\n                var cssDir = path.dirname(cssPath);\n                filename = path.normalize(path.join(cssDir, filename)).replace(/\\\\/g, '/');\n                file = files[filename];\n            }\n\n            if (file) {\n                return 'url(' + urlBuilder(filename) + ')'; // Add hash\n            }\n\n            return match; // Passthrough\n        });\n    }\n\n    function hashifyPath(filePath, hash) {\n        if (!options.hashify) {\n            return filePath;\n        }\n        if (filePath.indexOf('.') != -1) {\n            return filePath.replace(/\\.([^\\.]*)([?#].*)?$/, '-' + hash + '.$1$2');\n        }\n\n        return filePath.replace(/([?#].*)?$/, '-' + hash + '$1');\n    }\n\n    function prefixSlash(path) {\n        return path[0] === '/' ? path : '/' + path;\n    }\n\n    function reloadFile(filePath, stat) {\n        stat = typeof stat === 'object' ? stat : fs.statSync(filePath);\n\n        if (stat.isDirectory()) {\n            fs.readdir(filePath, function(err, contents) {\n                if (err) {\n                    console.warn(err);\n                } else {\n                    contents.forEach(function reloadDirContent(innerPath) {\n                        reloadFile(path.join(filePath, innerPath));\n                    });\n                }\n            });\n        }\n\n        var ext = path.extname(filePath);\n\n        if (ext === '.scss') {\n            var sassDependencies = sassGraph.parseDir(directory);\n\n            if (sassDependencies.index[filePath]) {\n                sassDependencies.index[filePath].importedBy.forEach(reloadFile);\n            }\n        } else if (ext === '.js') {\n            // Clear snockets cache\n            snockets.cache = {};\n            snockets.concatCache = {};\n\n            snockets.scan(filePath);\n            snockets.depGraph.parentsOf(filePath).forEach(reloadFile);\n        }\n\n        var relativeUrl = cacheFile(filePath, stat);\n\n        if (stylesheets.indexOf(relativeUrl) != -1) {\n            files[relativeUrl].content = hashifyCss(relativeUrl);\n            files[relativeUrl].hash = crypto.createHash('md5').update(files[relativeUrl].content).digest('hex');\n        }\n    }\n\n    function toRelativeUrl(filePath) {\n        var relativeUrl = path.relative(directory, path.resolve(filePath));\n\n        // Make URI-friendly and prepend a /\n        return prefixSlash(relativeUrl).replace(/\\\\/g, '/');\n    }\n\n    function shouldIgnore(filePath, ignore) {\n        if (!ignore) {\n            // Not ignoring anything\n            return false;\n        }\n\n        if (Array.isArray(ignore)) {\n            // Multiple things to ignore\n            return ignore.some(function ignoreElementMatch(ignored) {\n                return shouldIgnore(filePath, ignored);\n            });\n        }\n\n        return filePath.match(ignore) !== null;\n    }\n\n    function stripQueryAndTarget(filePath) {\n        return filePath.replace(/[?#].*$/, '');\n    }\n\n    function urlBuilder(filePath) {\n        var file = files[stripQueryAndTarget(prefixSlash(filePath))];\n\n        if (file) {\n            var uri = prefixSlash(filePath);\n\n            if (options.hashify) {\n                uri = hashifyPath(uri, file.hash);\n            }\n\n            if (options && options.hostname) {\n                uri = '//' + options.hostname + uri;\n            }\n\n            return uri;\n        } else {\n            return filePath;\n        }\n    }\n\n    // Load all files synchronously\n    (function loadFiles(workingDir) {\n        var contents = fs.readdirSync(workingDir);\n\n        contents.forEach(function loadDirectory(file) {\n            var filePath = path.join(workingDir, file);\n            var stat = fs.statSync(filePath);\n\n            if (stat.isDirectory()) {\n                return loadFiles(filePath);\n            }\n\n            cacheFile(filePath, stat);\n        });\n    })(directory);\n\n    // Hashify URLs in stylesheets\n    stylesheets.forEach(function(stylesheet) {\n        files[stylesheet].content = hashifyCss(stylesheet);\n        files[stylesheet].hash = crypto.createHash('md5').update(files[stylesheet].content).digest('hex');\n    });\n\n    // Watch directory for changes\n    if (options.watch.enabled) {\n        watch.createMonitor(directory, function monitorFiles(monitor) {\n            monitor.on('changed', reloadFile);\n            monitor.on('created', reloadFile);\n\n            monitor.on('removed', function removeFile(f, stat) {\n                var compiledPath = f.replace(/\\.scss$/, '.css');\n                delete files[toRelativeUrl(compiledPath)];\n            });\n        });\n    }\n\n    return function staticMiddleware(req, res, next) {\n        // Ignore anything that's not a GET or HEAD request\n        if (req.method !== 'GET' && req.method !== 'HEAD') {\n            return next();\n        }\n\n        // Register view helper if we haven't already\n        if (!req.app.locals.electricity) {\n            req.app.locals.electricity = {\n                url: urlBuilder\n            };\n        }\n\n        var reqInfo = dehashifyPath(req.path);\n        var file = files[reqInfo.path];\n\n        if (!file) {\n            // Fall back to checking original path\n            file = files[req.path];\n\n            if (!file) {\n                // Still no match\n                return next();\n            }\n        }\n\n        // Verify file matches the requested hash, otherwise 302\n        if (options.hashify && reqInfo.hash !== file.hash) {\n            res.set({\n                'Cache-Control': 'no-cache',\n                'Expires': '0',\n                'Pragma': 'no-cache'\n            });\n\n            return res.redirect(hashifyPath(reqInfo.path, file.hash));\n        }\n\n        var expires = new Date();\n        expires.setYear(expires.getFullYear() + 1);\n\n        res.set({\n            'Cache-Control': 'public, max-age=31536000', // One year\n            'Content-Type': file.contentType,\n            'ETag': file.hash,\n            'Expires': expires.toUTCString(),\n            'Last-Modified': file.modified.toUTCString()\n        });\n\n        if (options.headers) {\n            res.set(options.headers);\n        }\n\n        if (req.get('If-None-Match') === file.hash) {\n            res.status(304);\n            res.end();\n        } else if (new Date(req.get('If-Modified-Since')) >= file.modified) {\n            res.status(304);\n            res.end();\n        } else {\n            res.set({ 'Content-Length': file.contentLength });\n            res.status(200);\n\n            if (req.method === 'HEAD') {\n                return res.end();\n            }\n\n            var negotiator = new Negotiator(req);\n\n            if (negotiator.encodings(availableEncodings).indexOf('gzip') === 0 && gzipContentTypes.indexOf(file.contentType) !== -1) {\n                gzip(file, function gzipCallback(err, gzippedFile) {\n                    if (err) {\n                        return next(err);\n                    }\n\n                    res.set({\n                        'Content-Encoding': 'gzip',\n                        'Content-Length': gzippedFile.gzippedContentLength\n                    });\n\n                    res.send(file.gzippedContent);\n                });\n            } else {\n                res.send(file.content);\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-electricity/node_modules/electricity/lib/gzipContentTypes.js":"module.exports = [\n    'application/javascript',\n    'application/json',\n    'application/xml',\n    'text/css',\n    'text/html',\n    'text/javascript',\n    'text/plain'\n];\n"}